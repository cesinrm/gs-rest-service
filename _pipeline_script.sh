#!/bin/bash
set -e -o pipefail
export EXT_DIR="$TMPDIR/extension_content"
export ARCHIVE_DIR="$TMPDIR/extension_archive"
mkdir -p "$ARCHIVE_DIR"
export ARCHIVE_DIR=`readlink -f $ARCHIVE_DIR`
export GIT_ASKPASS=/opt/IBM/pipeline/bin/gitInfo.sh
git clone -q "$EXT_GIT_URL" "$EXT_DIR" > /dev/null
$(cd $EXT_DIR && git checkout -q "$EXT_GIT_BRANCH")
export PATH="$PATH:$EXT_DIR"
cat > _customer_script.sh <<'EOF_CUSTOMER_SCRIPT'
#!/bin/bash
set +x
set +e

export TOOLCHAIN_TOKEN PIPELINE_TOOLCHAIN_ID
export SERVICE_INSTANCE="(default)"
export SERVICE_INSTANCE_TYPE="nexus"
export TMP_ARCHIVE_DIR=""
export TMP_WORKING_DIR=""
export SONAR_SERVICE_INSTANCE="(default)"

. $EXT_DIR/_init.sh

# get toolchain services
$EXT_DIR/get-service-instances.sh
if [ $? -ne 0 ]; then
    echo "Failed to load toolchain"
    exit 1
fi

# generate sonar environment variables from (default) service instance
node $EXT_DIR/generate-sonar-env.js >/tmp/sonar.txt
if [ ! -s /tmp/sonar.txt ]; then
    echo "Warning, no sonarqube card available"
else
. /tmp/sonar.txt
fi

#generate Maven environment variables from nexus service instance
node $EXT_DIR/generate-maven-env.js >/tmp/maven.txt
if [ ! -s /tmp/maven.txt ]; then
    echo "Warning, no maven nexus card available"
else
. /tmp/maven.txt
fi

#create $SETTINGS_FILE file
$EXT_DIR/create-settings.sh

#set up directories
export ARCHIVE_DIR=.
if [ ! -z "$TMP_ARCHIVE_DIR" ]; then
    export ARCHIVE_DIR="$TMP_ARCHIVE_DIR"
fi
if [ ! -z "$TMP_WORKING_DIR" ]; then
    cd "$TMP_WORKING_DIR"
fi

#!/bin/bash
# environment variables are available:
# MAVEN_NAME: name of the service instance
# MAVEN_USER_ID: userid for the maven repository
# MAVEN_TOKEN: the token or password for the maven repository
# MAVEN_SNAPSHOT_URL: the maven snapshot repository
# MAVEN_RELEASE_URL: the maven release repository
# MAVEN_MIRROR_URL: the maven mirror repository
# SONAR_INSTANCE_NAME: the name of the SonarQube instance
# SONAR_SERVER_URL: the url of the SonarQube server
# SONAR_USER_ID: SonarQube user name
# SONAR_USER_TOKEN: SonarQube password or authentication token
# The settings.xml is available in $HOME/.m2/settings.xml
# The name of the snapshots repository is 'snapshots'
# The name of the release repository is 'releases'
# The name of the mirror repository is 'central'

#git checkout master
git config user.email "${userEmailGit}"
git config user.name "${userNameGit}"
echo "Fetching tags from repo"
git fetch --tags origin
echo "Merge from tag ${tagToBeDeployed}"
git merge "${tagToBeDeployed}"

mvn -q clean surefire:test
#mvn sonar:sonar

echo "change version of pom to ${versionToBeDeployed}"
mvn clean versions:set -q -DnewVersion=${versionToBeDeployed} -DskipTests


git add *
git commit -m "Change pom version to ${versionToBeDeployed} as desirable release"
git push origin master

mvn package -DskipTests
#mvn -DaltDeploymentRepository=releaseRepository::default::${MAVEN_RELEASE_URL} deploy


# Prepare release
#
#
if [ $? -ne 0 ]; then
    echo "Failed during execution of build command"
    exit 1
fi

# check the contents of the report-task.txt file generated by sonar
if [ -s target/sonar/report-task.txt ]; then
# there is a sonarqube report to process
rm -f /tmp/sonarqualitygates.txt
# install the node app to check the last task result
export CURRENT_DIR=`pwd`
cd $EXT_DIR
# need to be in EXT_DIR to get the package.json file
npm install
cd $CURRENT_DIR
if [ ! -z "$SONAR_USER_TOKEN" ]; then
if [ -z "$SONAR_USER_ID" ]; then
# user token
node $EXT_DIR/recursiveCheck.js target/sonar/report-task.txt "$SONAR_USER_TOKEN:" > /tmp/sonarqualitygates.txt
else
#user login/password
node $EXT_DIR/recursiveCheck.js target/sonar/report-task.txt "$SONAR_USER_ID:$SONAR_USER_TOKEN" > /tmp/sonarqualitygates.txt
fi
else
#no authentication
node $EXT_DIR/recursiveCheck.js target/sonar/report-task.txt > /tmp/sonarqualitygates.txt
fi

if [ -s /tmp/sonarqualitygates.txt ]; then
. /tmp/sonarqualitygates.txt

if [ "$SONARQUBE_RESULT" == "FAILED" ]; then
    echo "Quality gate check failed"
    exit 1
else
    echo "Quality gate check passed"
fi
else
echo "No file /tmp/sonarqualitygates.txt"
fi
else
echo "Could not find the report-task.txt file"
fi


EOF_CUSTOMER_SCRIPT
if [ "$PIPELINE_DEBUG_SCRIPT" == "true" ]; then
current_time=$(echo $(($(date +%s%N)/1000000)))
fi
source _customer_script.sh
if [ "$PIPELINE_DEBUG_SCRIPT" == "true" ]; then
end_time=$(echo $(($(date +%s%N)/1000000)))
let "total_time=$end_time - $current_time"
echo "_DEBUG:USER_EXTENSION_SCRIPT:$total_time"
current_time=
end_time=
total_time=
fi
cd "$WORKSPACE"
if [ -d "$ARCHIVE_DIR" ]; then
skip_artifact_upload=false
artifact_files_size=$(du -sm "$ARCHIVE_DIR" | tr -s [:space:] ' ' | cut -d ' ' -f 1)
artifact_files=$(find "$ARCHIVE_DIR" | wc -l)
if [ "$PIPELINE_DEBUG_SCRIPT" == "true" ]; then
echo _DEBUG:ARTIFACT_FILES_SIZE:$artifact_files_size
echo _DEBUG:ARTIFACT_FILES:$artifact_files
fi
if [ "$skip_artifact_upload" == "false" ]; then
if [ "$PIPELINE_DEBUG_SCRIPT" == "true" ]; then
current_time=$(echo $(($(date +%s%N)/1000000)))
fi
export_variable="-x _pipeline_script.sh -x _customer_script.sh -x _codestation_script.sh"
if test -f '.csignore'; then
while read -r line;
do
if test -n "$line"; then
if echo "$line" | grep -q '^[^\\]*$'; then
if echo "$line" | grep -q '^[0-9A-Za-z\/\.\-\_\*]*$'; then
export_variable="$export_variable -x $line"
fi
fi
fi
done < .csignore
else
export_variable="$export_variable -x /.git*"
fi
export ZIP_EXCLUDES="$export_variable"
CURL_VERBOSITY="--silent"
if [ "$PIPELINE_DEBUG_SCRIPT" == "true" ]; then CURL_VERBOSITY="-vvvv"; fi
echo "Preparing the build artifacts..."
curl $CURL_VERBOSITY --fail --retry 3 --retry-delay 5 --connect-timeout 10 --output _codestation_script.sh https://pipeline-artifact-repository-service.ng.bluemix.net:443/v2/up.sh
if [ $? == 0 ]; then
export PIPELINE_CODESTATION_URL="https://pipeline-artifact-repository-service.ng.bluemix.net:443"
export PIPELINE_ARCHIVE_ID=""
   sh _codestation_script.sh
else
   echo "An error occurred while attempting to download https://pipeline-artifact-repository-service.ng.bluemix.net:443/v2/up.sh"
   exit 1
fi
if [ "$PIPELINE_DEBUG_SCRIPT" == "true" ]; then
end_time=$(echo $(($(date +%s%N)/1000000)))
let "total_time=$end_time - $current_time"
echo "_DEBUG:UPLOAD_ARTIFACTS:$total_time"
current_time=
end_time=
total_time=
fi
fi
else
echo "Archive directory $ARCHIVE_DIR does not exist. Please check the name."
exit 1
fi
if [ "$PIPELINE_DEBUG_SCRIPT" == "true" ]; then
current_time=$(echo $(($(date +%s%N)/1000000)))
fi
/opt/IBM/pipeline/bin/ids-set-env.sh 'https://devops-api.ng.bluemix.net/v1/pipeline/notifications/stage_properties/c93a414c-accf-4e3f-840d-b9ab24e99be6' 'de949d8430a24cc8e74895538fe5ad38.a5d690e6254151be65d3a187131f1a0308eea654025c94f73e2a39ff920f93cffc12460b7983237bc6b665809132a361d65e707310c6a87a91b869129366b24e7f53409e0a9ed2415879954c05045757.5fabc64fc7a94e836fa77da02f03a5ce04e1e2a3' "$IDS_OUTPUT_PROPS"
if [ "$PIPELINE_DEBUG_SCRIPT" == "true" ]; then
end_time=$(echo $(($(date +%s%N)/1000000)))
let "total_time=$end_time - $current_time"
echo "_DEBUG:UPLOAD_STAGE_PROPERTIES:$total_time"
current_time=
end_time=
total_time=
fi
