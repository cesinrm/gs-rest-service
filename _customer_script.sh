#!/bin/bash
set +x
set +e

export TOOLCHAIN_TOKEN PIPELINE_TOOLCHAIN_ID
export SERVICE_INSTANCE="(default)"
export SERVICE_INSTANCE_TYPE="nexus"
export TMP_ARCHIVE_DIR=""
export TMP_WORKING_DIR=""
export SONAR_SERVICE_INSTANCE="(default)"

. $EXT_DIR/_init.sh

# get toolchain services
$EXT_DIR/get-service-instances.sh
if [ $? -ne 0 ]; then
    echo "Failed to load toolchain"
    exit 1
fi

# generate sonar environment variables from (default) service instance
node $EXT_DIR/generate-sonar-env.js >/tmp/sonar.txt
if [ ! -s /tmp/sonar.txt ]; then
    echo "Warning, no sonarqube card available"
else
. /tmp/sonar.txt
fi

#generate Maven environment variables from nexus service instance
node $EXT_DIR/generate-maven-env.js >/tmp/maven.txt
if [ ! -s /tmp/maven.txt ]; then
    echo "Warning, no maven nexus card available"
else
. /tmp/maven.txt
fi

#create $SETTINGS_FILE file
$EXT_DIR/create-settings.sh

#set up directories
export ARCHIVE_DIR=.
if [ ! -z "$TMP_ARCHIVE_DIR" ]; then
    export ARCHIVE_DIR="$TMP_ARCHIVE_DIR"
fi
if [ ! -z "$TMP_WORKING_DIR" ]; then
    cd "$TMP_WORKING_DIR"
fi

#!/bin/bash
# environment variables are available:
# MAVEN_NAME: name of the service instance
# MAVEN_USER_ID: userid for the maven repository
# MAVEN_TOKEN: the token or password for the maven repository
# MAVEN_SNAPSHOT_URL: the maven snapshot repository
# MAVEN_RELEASE_URL: the maven release repository
# MAVEN_MIRROR_URL: the maven mirror repository
# SONAR_INSTANCE_NAME: the name of the SonarQube instance
# SONAR_SERVER_URL: the url of the SonarQube server
# SONAR_USER_ID: SonarQube user name
# SONAR_USER_TOKEN: SonarQube password or authentication token
# The settings.xml is available in $HOME/.m2/settings.xml
# The name of the snapshots repository is 'snapshots'
# The name of the release repository is 'releases'
# The name of the mirror repository is 'central'

#git checkout master
git config user.email "${userEmailGit}"
git config user.name "${userNameGit}"
echo "Fetching tags from repo"
git fetch --tags origin
echo "Merge from tag ${tagToBeDeployed}"
git merge "${tagToBeDeployed}"

mvn -q clean surefire:test
#mvn sonar:sonar

echo "change version of pom to ${versionToBeDeployed}"
mvn clean versions:set -q -DnewVersion=${versionToBeDeployed} -DskipTests


git add *
git commit -m "Change pom version to ${versionToBeDeployed} as desirable release"
git push origin master

mvn package -DskipTests
#mvn -DaltDeploymentRepository=releaseRepository::default::${MAVEN_RELEASE_URL} deploy


# Prepare release
#
#
if [ $? -ne 0 ]; then
    echo "Failed during execution of build command"
    exit 1
fi

# check the contents of the report-task.txt file generated by sonar
if [ -s target/sonar/report-task.txt ]; then
# there is a sonarqube report to process
rm -f /tmp/sonarqualitygates.txt
# install the node app to check the last task result
export CURRENT_DIR=`pwd`
cd $EXT_DIR
# need to be in EXT_DIR to get the package.json file
npm install
cd $CURRENT_DIR
if [ ! -z "$SONAR_USER_TOKEN" ]; then
if [ -z "$SONAR_USER_ID" ]; then
# user token
node $EXT_DIR/recursiveCheck.js target/sonar/report-task.txt "$SONAR_USER_TOKEN:" > /tmp/sonarqualitygates.txt
else
#user login/password
node $EXT_DIR/recursiveCheck.js target/sonar/report-task.txt "$SONAR_USER_ID:$SONAR_USER_TOKEN" > /tmp/sonarqualitygates.txt
fi
else
#no authentication
node $EXT_DIR/recursiveCheck.js target/sonar/report-task.txt > /tmp/sonarqualitygates.txt
fi

if [ -s /tmp/sonarqualitygates.txt ]; then
. /tmp/sonarqualitygates.txt

if [ "$SONARQUBE_RESULT" == "FAILED" ]; then
    echo "Quality gate check failed"
    exit 1
else
    echo "Quality gate check passed"
fi
else
echo "No file /tmp/sonarqualitygates.txt"
fi
else
echo "Could not find the report-task.txt file"
fi


